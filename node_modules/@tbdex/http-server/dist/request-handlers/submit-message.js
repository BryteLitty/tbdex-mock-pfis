import { submitOrder } from './submit-order.js';
import { submitClose } from './submit-close.js';
import { Parser } from '@tbdex/protocol';
export async function submitMessage(req, res, opts) {
    let message;
    try {
        message = await Parser.parseMessage(req.body);
    }
    catch (e) {
        const errorResponse = { detail: 'Request body was not a valid Order or Close message' };
        res.status(400).json({ errors: [errorResponse] });
        return;
    }
    if (message.metadata.exchangeId !== req.params.exchangeId) {
        const errorResponse = { detail: 'ExchangeId in message did not match exchangeId in path' };
        res.status(400).json({ errors: [errorResponse] });
        return;
    }
    if (message.isOrder()) {
        await submitOrder(message, req, res, {
            callback: opts.submitOrderCallback,
            exchangesApi: opts.exchangesApi,
        });
    }
    else if (message.isClose()) {
        await submitClose(message, req, res, {
            callback: opts.submitCloseCallback,
            exchangesApi: opts.exchangesApi,
        });
    }
    else {
        const errorResponse = { detail: 'Request body was not a valid Order or Close message' };
        res.status(400).json({ errors: [errorResponse] });
        return;
    }
}
//# sourceMappingURL=submit-message.js.map