import { CallbackError } from '../callback-error.js';
export async function submitOrder(order, req, res, opts) {
    const { callback, exchangesApi } = opts;
    const exchange = await exchangesApi.getExchange({ id: order.exchangeId });
    if (exchange == undefined) {
        const errorResponse = { detail: `No exchange found for ${order.exchangeId}` };
        res.status(404).json({ errors: [errorResponse] });
        return;
    }
    if (!exchange.isValidNext('order')) {
        const errorResponse = {
            detail: `Cannot submit Order for an exchange where the last message is kind: ${exchange.latestMessage.metadata}`
        };
        res.status(409).json({ errors: [errorResponse] });
        return;
    }
    if (new Date(exchange.quote.data.expiresAt) < new Date()) {
        const errorResponse = { detail: 'Quote is expired' };
        res.status(410).json({ errors: [errorResponse] });
        return;
    }
    if (!callback) {
        res.sendStatus(202);
        return;
    }
    try {
        await callback({ request: req, response: res }, order);
        res.sendStatus(202);
    }
    catch (e) {
        if (e instanceof CallbackError) {
            res.status(e.statusCode).json({ errors: e.details });
        }
        else {
            const errorDetail = { detail: 'Internal Server Error' };
            res.status(500).json({ errors: [errorDetail] });
        }
    }
}
//# sourceMappingURL=submit-order.js.map